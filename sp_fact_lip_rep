CREATE OR REPLACE PROCEDURE `vf-grp-mi-reporting-dev-beta.vf_grp_mi_reporting_dev_beta_mc2_rawprepared_s.sp_fact_lip_rep`()
BEGIN
  DECLARE project_dataset_id STRING DEFAULT 'vf-grp-mi-reporting-dev-beta.vf_grp_mi_reporting_dev_beta_mc2_rawprepared_s';

  -- Create DDL for fact table with partitioning
  EXECUTE IMMEDIATE FORMAT("""
    CREATE TABLE IF NOT EXISTS `%s.fact_lib_rep` (
      Key_Reverse_Map STRING,
      CUSTOM1_CD STRING,
      TARIFF_SEGMENT_CD STRING,
      File_Name STRING,
      CALENDAR_MONTH_ID INT64,
      NUMERATOR_VALUE NUMERIC,
      DENOMINATOR_VALUE NUMERIC,
      MEASURE_VALUE NUMERIC,
      CHART_OF_ACCNT_CD STRING,
      CONSOLIDATION_CD_O STRING,
      LEGAL_ENTITY_CD STRING,
      SCENARIO_CD STRING,
      SCENARIO_CD_O STRING,
      ICP_ENTITY_CD STRING,
      MEASURE_CD STRING,
      VIEW_CD STRING,
      FACT_SYSTEM_FLAG STRING,
      CUSTOM3_CD STRING,
      ACCOUNT_TYPE STRING,
      VERSION STRING,
      KPI_KEY STRING,
      ACCOUNT_TYPE_INDICATOR STRING,
      RUN_ID INT64,
      ORGANIC_FLAG INT64,
      YEAR INT64,
      CONSOLIDATION_CD STRING,
      KEY_DASHBOARD STRING,
      inserted_at TIMESTAMP,
      source_file STRING,
      status INT64
    ) PARTITION BY TIMESTAMP_TRUNC(inserted_at, MONTH)
  """, project_dataset_id);

  -- Create temp_fact_lib_rep table by appending multiple sources
  EXECUTE IMMEDIATE FORMAT("""
    CREATE OR REPLACE TABLE `%s.temp_fact_lib_rep` AS
    SELECT * FROM `%s.fact_base_transform_lib_rep_b`
    UNION ALL
    SELECT * FROM `%s.fact_base_transform_lib_rep_br`
    UNION ALL
    SELECT * FROM `%s.fact_base_transform_lib_rep_e`
    UNION ALL
    SELECT * FROM `%s.fact_base_transform_lib_rep_f`
    UNION ALL
    SELECT * FROM `%s.fact_base_transform_lib_rep_fr`
    UNION ALL
    SELECT * FROM `%s.fact_base_transform_lib_reporganic`
  """, project_dataset_id, project_dataset_id, project_dataset_id, project_dataset_id, project_dataset_id, project_dataset_id, project_dataset_id);

  -- Clean incoming temp data
  EXECUTE IMMEDIATE FORMAT("""
    CREATE OR REPLACE TABLE `%s.temp_cleaned_fact_lib_rep` AS
    SELECT  
      NULLIF(Key_Reverse_Map,'') AS Key_Reverse_Map,
      NULLIF(CUSTOM1_CD,'') AS CUSTOM1_CD,
      NULLIF(TARIFF_SEGMENT_CD,'') AS TARIFF_SEGMENT_CD,
      NULLIF(File_Name,'') AS File_Name,
      IFNULL(CAST(CALENDAR_MONTH_ID AS INT64), 0) AS CALENDAR_MONTH_ID,
      CAST(NULLIF(NUMERATOR_VALUE, '') AS NUMERIC) AS NUMERATOR_VALUE,
      CAST(NULLIF(DENOMINATOR_VALUE, '') AS NUMERIC) AS DENOMINATOR_VALUE,
      CAST(NULLIF(MEASURE_VALUE, '') AS NUMERIC) AS MEASURE_VALUE,
      NULLIF(CHART_OF_ACCNT_CD,'') AS CHART_OF_ACCNT_CD,
      NULLIF(CONSOLIDATION_CD_O,'') AS CONSOLIDATION_CD_O,
      NULLIF(LEGAL_ENTITY_CD,'') AS LEGAL_ENTITY_CD,
      NULLIF(SCENARIO_CD,'') AS SCENARIO_CD,
      NULLIF(SCENARIO_CD_O,'') AS SCENARIO_CD_O,
      NULLIF(ICP_ENTITY_CD,'') AS ICP_ENTITY_CD,
      NULLIF(MEASURE_CD,'') AS MEASURE_CD,
      NULLIF(VIEW_CD,'') AS VIEW_CD,
      NULLIF(FACT_SYSTEM_FLAG,'') AS FACT_SYSTEM_FLAG,
      NULLIF(CUSTOM3_CD,'') AS CUSTOM3_CD,
      NULLIF(ACCOUNT_TYPE,'') AS ACCOUNT_TYPE,
      NULLIF(VERSION,'') AS VERSION,
      NULLIF(TRIM(KPI_KEY),'') AS KPI_KEY,
      NULLIF(ACCOUNT_TYPE_INDICATOR,'') AS ACCOUNT_TYPE_INDICATOR,
      IFNULL(CAST(RUN_ID AS INT64), 0) AS RUN_ID,
      IFNULL(CAST(ORGANIC_FLAG AS INT64), 0) AS ORGANIC_FLAG,
      IFNULL(CAST(YEAR AS INT64), 0) AS YEAR,
      NULLIF(CONSOLIDATION_CD,'') AS CONSOLIDATION_CD,
      NULLIF(KEY_DASHBOARD,'') AS KEY_DASHBOARD,
      inserted_at,
      source_file
    FROM `%s.temp_fact_lib_rep`
  """, project_dataset_id, project_dataset_id);

  -- Merge data into fact_lib_rep
  EXECUTE IMMEDIATE FORMAT("""
    MERGE INTO `%s.fact_lib_rep` AS T
    USING (
      SELECT * FROM (
        SELECT *,
               ROW_NUMBER() OVER (
                 PARTITION BY 
                   CUSTOM1_CD,
                   TARIFF_SEGMENT_CD,
                   CALENDAR_MONTH_ID,
                   CHART_OF_ACCNT_CD,
                   CONSOLIDATION_CD_O,
                   LEGAL_ENTITY_CD,
                   SCENARIO_CD_O,
                   ICP_ENTITY_CD,
                   MEASURE_CD,
                   VIEW_CD,
                   CUSTOM3_CD
               ) AS rn
        FROM `%s.temp_cleaned_fact_lib_rep`
      ) WHERE rn = 1
    ) AS S
    ON  T.CUSTOM1_CD = S.CUSTOM1_CD AND
        T.TARIFF_SEGMENT_CD = S.TARIFF_SEGMENT_CD AND
        T.CALENDAR_MONTH_ID = S.CALENDAR_MONTH_ID AND
        T.CHART_OF_ACCNT_CD = S.CHART_OF_ACCNT_CD AND
        T.CONSOLIDATION_CD_O = S.CONSOLIDATION_CD_O AND
        T.LEGAL_ENTITY_CD = S.LEGAL_ENTITY_CD AND
        T.SCENARIO_CD_O = S.SCENARIO_CD_O AND
        T.ICP_ENTITY_CD = S.ICP_ENTITY_CD AND
        T.MEASURE_CD = S.MEASURE_CD AND
        T.VIEW_CD = S.VIEW_CD AND
        T.CUSTOM3_CD = S.CUSTOM3_CD
    WHEN MATCHED THEN
      UPDATE SET
        Key_Reverse_Map = S.Key_Reverse_Map,
        File_Name = S.File_Name,
        NUMERATOR_VALUE = S.NUMERATOR_VALUE,
        DENOMINATOR_VALUE = S.DENOMINATOR_VALUE,
        MEASURE_VALUE = S.MEASURE_VALUE,
        SCENARIO_CD = S.SCENARIO_CD,
        FACT_SYSTEM_FLAG = S.FACT_SYSTEM_FLAG,
        ACCOUNT_TYPE = S.ACCOUNT_TYPE,
        VERSION = S.VERSION,
        KPI_KEY = S.KPI_KEY,
        ACCOUNT_TYPE_INDICATOR = S.ACCOUNT_TYPE_INDICATOR,
        RUN_ID = S.RUN_ID,
        ORGANIC_FLAG = S.ORGANIC_FLAG,
        YEAR = S.YEAR,
        CONSOLIDATION_CD = S.CONSOLIDATION_CD,
        KEY_DASHBOARD = S.KEY_DASHBOARD,
        inserted_at = S.inserted_at,
        source_file = S.source_file,
        status = 1
    WHEN NOT MATCHED THEN
      INSERT (
        Key_Reverse_Map, CUSTOM1_CD, TARIFF_SEGMENT_CD, File_Name, CALENDAR_MONTH_ID,
        NUMERATOR_VALUE, DENOMINATOR_VALUE, MEASURE_VALUE, CHART_OF_ACCNT_CD, CONSOLIDATION_CD_O,
        LEGAL_ENTITY_CD, SCENARIO_CD, SCENARIO_CD_O, ICP_ENTITY_CD, MEASURE_CD,
        VIEW_CD, FACT_SYSTEM_FLAG, CUSTOM3_CD, ACCOUNT_TYPE, VERSION,
        KPI_KEY, ACCOUNT_TYPE_INDICATOR, RUN_ID, ORGANIC_FLAG, YEAR,
        CONSOLIDATION_CD, KEY_DASHBOARD, inserted_at, source_file, status
      )
      VALUES (
        S.Key_Reverse_Map, S.CUSTOM1_CD, S.TARIFF_SEGMENT_CD, S.File_Name, S.CALENDAR_MONTH_ID,
        S.NUMERATOR_VALUE, S.DENOMINATOR_VALUE, S.MEASURE_VALUE, S.CHART_OF_ACCNT_CD, S.CONSOLIDATION_CD_O,
        S.LEGAL_ENTITY_CD, S.SCENARIO_CD, S.SCENARIO_CD_O, S.ICP_ENTITY_CD, S.MEASURE_CD,
        S.VIEW_CD, S.FACT_SYSTEM_FLAG, S.CUSTOM3_CD, S.ACCOUNT_TYPE, S.VERSION,
        S.KPI_KEY, S.ACCOUNT_TYPE_INDICATOR, S.RUN_ID, S.ORGANIC_FLAG, S.YEAR,
        S.CONSOLIDATION_CD, S.KEY_DASHBOARD, S.inserted_at, S.source_file, 0
      )
  """, project_dataset_id, project_dataset_id);

  -- Drop temp tables
  EXECUTE IMMEDIATE FORMAT("DROP TABLE `%s.fact_base_transform_lib_rep_b`", project_dataset_id);
  EXECUTE IMMEDIATE FORMAT("DROP TABLE `%s.fact_base_transform_lib_rep_br`", project_dataset_id);
  EXECUTE IMMEDIATE FORMAT("DROP TABLE `%s.fact_base_transform_lib_rep_e`", project_dataset_id);
  EXECUTE IMMEDIATE FORMAT("DROP TABLE `%s.fact_base_transform_lib_rep_f`", project_dataset_id);
  EXECUTE IMMEDIATE FORMAT("DROP TABLE `%s.fact_base_transform_lib_rep_fr`", project_dataset_id);
  EXECUTE IMMEDIATE FORMAT("DROP TABLE `%s.fact_base_transform_lib_reporganic`", project_dataset_id);
  EXECUTE IMMEDIATE FORMAT("DROP TABLE `%s.temp_cleaned_fact_lib_rep`", project_dataset_id);
  EXECUTE IMMEDIATE FORMAT("DROP TABLE `%s.temp_fact_lib_rep`", project_dataset_id);

EXCEPTION WHEN ERROR THEN
  RAISE USING MESSAGE = 'ERROR from script sp_fact_lib_rep: ' || @@error.message || ' | Stack trace: ' || @@error.formatted_stack_trace;

END;
